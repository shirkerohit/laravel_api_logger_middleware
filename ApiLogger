<?php

namespace App\Http\Middleware;

use Closure;

class ApiLogger
{
    /**
     * Handle an incoming request.
     *
     * @param  \Illuminate\Http\Request  $request
     * @param  \Closure  $next
     * @return mixed
     */
    public function handle($request, Closure $next)
    {
        $content = $next($request);
        return $content;
    }

    public function terminate($request, $response)
    {
        try {
            $last_accessed = \Carbon\Carbon::now();
            $url = $request->URL();
            $user_id = "Anonymous";
            $response_data = json_encode($response->getContent());
            $request_data = $request->all();
            $user_id = null;
            $masked_data = ['password', 'new_password'];
            foreach ($request_data as $key => &$value) {
                if (in_array($key, $masked_data)) {
                    $value = "******";
                }
            }
            try {
                $user_token = JWTAuth::parseToken()->getToken();
                $user_fullname = JWTAuth::parseToken()->toUser()->name;
                if ($user_token) {
                    $user_id = JWTAuth::parseToken()->toUser()->id;
                }

            } catch (\Exception $e) {
                $user_token = "NULL";
                $user_fullname = "Anonymous";
            }

            $client_ip = $request->ip();
            $request_data = json_encode($request_data);
            $status_code = $response->getStatusCode();
            $data = ['url' => $url, 'client_ip' => $client_ip, 'user_id' => $user_id, 'user_name' => $user_fullname, 'request_data' => $request_data, 'response_data' => $response_data, 'status_code' => $status_code, 'user_token' => $user_token];
            $save = \App\Models\ApiLogs::insert($data);

        } catch (\Exception $e) {
            \Log::error('Error occured Logging request From ApiLogger' . $e->getMessage() . "in file: " . $e->getfile() . "at line :" . $e->getLine());
        }
    }
}
